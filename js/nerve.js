
/*
  * nerve
  * http://r1cebank.github.io/Nerve/
 #
  * Copyright (c) 2014 r1cebank
  * Licensed under the MIT license.
 */

(function() {
  var app, bodyParser, chalk, d, express, guest, http, io, mongo, mongourl, port, raygun, raygunClient, winston;

  require('newrelic');

  express = require('express');

  app = express();

  http = require('http').Server(app);

  io = require('socket.io')(http);

  bodyParser = require('body-parser');

  mongo = require('mongodb').MongoClient;

  chalk = require('chalk');

  winston = require('winston');

  winston.cli();

  if (!process.env.PRODUCTION) {
    chalk.enabled = true;
    chalk.supportsColor = true;
    winston.info('Forcing chalk color support.');
  }

  if (process.env.PRODUCTION != null) {
    raygun = require('raygun');
    raygunClient = new raygun.Client().init({
      apiKey: 'MJqfCmhfsVzK8wR3TML/Fw=='
    });
  }

  d = require('domain').create();

  d.on('error', function(err) {
    return raygunClient.send(err, {}, function() {
      return process.exit();
    });
  });

  port = process.env.PORT || 3939;

  module.exports = function(options) {
    var VERBOSE;
    return VERBOSE = options;
  };

  mongourl = 'mongodb://nerved:CphV7caUpdYRR9@ds041561.mongolab.com:41561/heroku_app33695157';

  guest = {
    name: "guest",
    email: "nerve-guest@gmail.com",
    profession: "guest",
    talents: "guesting"
  };

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use('/css', express["static"](process.cwd() + '/www/css'));

  app.use('/img', express["static"](process.cwd() + '/www/img'));

  app.use('/js', express["static"](process.cwd() + '/www/js'));

  app.use(function(err, req, res, next) {
    return raygunClient.send(err, {
      request: req,
      response: res,
      next: next
    });
  });

  app.get('/', function(req, res) {
    return res.sendFile(process.cwd() + '/www/index.html');
  });

  app.post('/login', function(req, res) {
    return res.send("user: " + req.body.user + " pass: " + req.body.pass);
  });

  mongo.connect(mongourl, function(err, db) {
    var profiles, server, users;
    if (err != null) {
      winston.error('filed to connect nerve database');
      raygunClient.send(err);
      process.exit();
    }
    winston.info('connected to database.');
    users = db.collection('users');
    profiles = db.collection('profiles');
    server = exports.server = http.listen(port, function() {
      var host;
      host = server.address().address;
      port = server.address().port;
      return winston.info('server started at http://' + host + ':' + port);
    });

    /*
    post {
      author: "",
      title: "",
      description: "",
      tags: {},
      requirement: {}, //tags and requirement are automatically generated as user input
      status: "",
      comp: "",
      location: "",
      remark: "",
      date: "",
    }
     */
    server.on('error', function(err) {
      return raygunClient.send(err);
    });
    return io.on('connection', function(socket) {
      return require('./events.js')(socket);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,