(function() {
  var app, d, express, http, io, port, raygun, raygunClient, server, uuid;

  if (process.env.NODETIME_ACCOUNT_KEY != null) {
    require('nodetime').profile({
      accountKey: process.env.NODETIME_ACCOUNT_KEY,
      appName: 'nerved'
    });
  }

  raygun = require('raygun');

  raygunClient = new raygun.Client().init({
    apiKey: 'MJqfCmhfsVzK8wR3TML/Fw=='
  });

  d = require('domain').create();

  d.on('error', function(err) {
    return raygunClient.send(err, {}, function() {
      return process.exit();
    });
  });

  port = process.env.PORT || 3939;

  express = require('express');

  app = express();

  http = require('http').Server(app);

  io = require('socket.io')(http);

  uuid = require('node-uuid');

  app.use('/css', express["static"](process.cwd() + '/www/css'));

  app.use('/img', express["static"](process.cwd() + '/www/img'));

  app.use('/js', express["static"](process.cwd() + '/www/js'));

  app.use(function(err, req, res, next) {
    return raygunClient.send(err, {
      request: req,
      response: res,
      next: next
    });
  });

  app.get('/', function(req, res) {
    return res.sendFile(process.cwd() + '/www/index.html');
  });

  server = http.listen(port, function() {
    var host;
    host = server.address().address;
    port = server.address().port;
    return console.log('server started at http://%s:%s', host, port);
  });

  server.on('error', function(err) {
    return raygunClient.send(err);
  });

  io.on('connection', function(socket) {
    socket.emit('handshake', 'welcome to nerve');
    return socket.on('error', function(err) {
      return raygunClient.send(err);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QTtBQUN6QixRQUFBLElBQUE7QUFBQSxJQUFBLElBQUEsR0FBTyxNQUFNLENBQUMsT0FBUCxDQUFBLENBQWdCLENBQUMsT0FBeEIsQ0FBQTtBQUFBLElBQ0EsSUFBQSxHQUFPLE1BQU0sQ0FBQyxPQUFQLENBQUEsQ0FBZ0IsQ0FBQyxJQUR4QixDQUFBO1dBRUEsT0FBTyxDQUFDLEdBQVIsQ0FBYSxnQ0FBYixFQUE4QyxJQUE5QyxFQUFvRCxJQUFwRCxFQUh5QjtFQUFBLENBQWxCLENBbkNULENBQUE7O0FBQUEsRUF3Q0EsTUFBTSxDQUFDLEVBQVAsQ0FBVyxPQUFYLEVBQW1CLFNBQUMsR0FBRCxHQUFBO1dBQ2pCLFlBQVksQ0FBQyxJQUFiLENBQWtCLEdBQWxCLEVBRGlCO0VBQUEsQ0FBbkIsQ0F4Q0EsQ0FBQTs7QUFBQSxFQTJDQSxFQUFFLENBQUMsRUFBSCxDQUFPLFlBQVAsRUFBb0IsU0FBQyxNQUFELEdBQUE7QUFDbEIsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFhLFdBQWIsRUFBMEIsa0JBQTFCLENBQUEsQ0FBQTtXQUNBLE1BQU0sQ0FBQyxFQUFQLENBQVcsT0FBWCxFQUFtQixTQUFDLEdBQUQsR0FBQTthQUNqQixZQUFZLENBQUMsSUFBYixDQUFrQixHQUFsQixFQURpQjtJQUFBLENBQW5CLEVBRmtCO0VBQUEsQ0FBcEIsQ0EzQ0EsQ0FBQTtBQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJpZiBwcm9jZXNzLmVudi5OT0RFVElNRV9BQ0NPVU5UX0tFWT9cbiAgcmVxdWlyZSgnbm9kZXRpbWUnKS5wcm9maWxlXG4gICAgYWNjb3VudEtleTogcHJvY2Vzcy5lbnYuTk9ERVRJTUVfQUNDT1VOVF9LRVksXG4gICAgYXBwTmFtZTogJ25lcnZlZCdcblxucmF5Z3VuID0gcmVxdWlyZSAncmF5Z3VuJ1xucmF5Z3VuQ2xpZW50ID0gbmV3IHJheWd1bi5DbGllbnQoKS5pbml0XG4gIGFwaUtleTogJ01KcWZDbWhmc1Z6Szh3UjNUTUwvRnc9PSdcblxuZCA9IHJlcXVpcmUoJ2RvbWFpbicpLmNyZWF0ZSgpXG5kLm9uICdlcnJvcicsIChlcnIpIC0+XG4gIHJheWd1bkNsaWVudC5zZW5kIGVyciwge30sIC0+XG4gICAgcHJvY2Vzcy5leGl0KClcblxucG9ydCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzkzOVxuXG5leHByZXNzID0gcmVxdWlyZSAnZXhwcmVzcydcbmFwcCA9IGV4cHJlc3MoKVxuaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKS5TZXJ2ZXIoYXBwKVxuaW8gPSByZXF1aXJlKCdzb2NrZXQuaW8nKShodHRwKVxudXVpZCA9IHJlcXVpcmUgJ25vZGUtdXVpZCdcblxuXG5hcHAudXNlICcvY3NzJywgZXhwcmVzcy5zdGF0aWMgcHJvY2Vzcy5jd2QoKSArICcvd3d3L2NzcydcbmFwcC51c2UgJy9pbWcnLCBleHByZXNzLnN0YXRpYyBwcm9jZXNzLmN3ZCgpICsgJy93d3cvaW1nJ1xuYXBwLnVzZSAnL2pzJywgZXhwcmVzcy5zdGF0aWMgcHJvY2Vzcy5jd2QoKSArICcvd3d3L2pzJ1xuYXBwLnVzZSAoZXJyLCByZXEsIHJlcywgbmV4dCkgLT5cbiAgcmF5Z3VuQ2xpZW50LnNlbmQgZXJyLFxuICAgIHJlcXVlc3Q6IHJlcVxuICAgIHJlc3BvbnNlOiByZXNcbiAgICBuZXh0OiBuZXh0XG5cbmFwcC5nZXQgJy8nLCAocmVxLCByZXMpIC0+XG4gIHJlcy5zZW5kRmlsZSBwcm9jZXNzLmN3ZCgpICsgJy93d3cvaW5kZXguaHRtbCdcblxuc2VydmVyID0gaHR0cC5saXN0ZW4gcG9ydCwgLT5cbiAgaG9zdCA9IHNlcnZlci5hZGRyZXNzKCkuYWRkcmVzc1xuICBwb3J0ID0gc2VydmVyLmFkZHJlc3MoKS5wb3J0XG4gIGNvbnNvbGUubG9nICdzZXJ2ZXIgc3RhcnRlZCBhdCBodHRwOi8vJXM6JXMnLCBob3N0LCBwb3J0XG5cbnNlcnZlci5vbiAnZXJyb3InLCAoZXJyKSAtPlxuICByYXlndW5DbGllbnQuc2VuZCBlcnJcblxuaW8ub24gJ2Nvbm5lY3Rpb24nLCAoc29ja2V0KSAtPlxuICBzb2NrZXQuZW1pdCAnaGFuZHNoYWtlJywgJ3dlbGNvbWUgdG8gbmVydmUnXG4gIHNvY2tldC5vbiAnZXJyb3InLCAoZXJyKSAtPlxuICAgIHJheWd1bkNsaWVudC5zZW5kIGVyclxuIl19