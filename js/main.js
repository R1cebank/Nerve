(function() {
  var app, bodyParser, d, express, http, io, port, raygun, raygunClient, server, uuid;

  if (process.env.NODETIME_ACCOUNT_KEY != null) {
    require('nodetime').profile({
      accountKey: process.env.NODETIME_ACCOUNT_KEY,
      appName: 'nerved'
    });
  }

  raygun = require('raygun');

  raygunClient = new raygun.Client().init({
    apiKey: 'MJqfCmhfsVzK8wR3TML/Fw=='
  });

  d = require('domain').create();

  d.on('error', function(err) {
    return raygunClient.send(err, {}, function() {
      return process.exit();
    });
  });

  port = process.env.PORT || 3939;

  express = require('express');

  app = express();

  http = require('http').Server(app);

  io = require('socket.io')(http);

  uuid = require('node-uuid');

  bodyParser = require('body-parser');

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use('/css', express["static"](process.cwd() + '/www/css'));

  app.use('/img', express["static"](process.cwd() + '/www/img'));

  app.use('/js', express["static"](process.cwd() + '/www/js'));

  app.use(function(err, req, res, next) {
    return raygunClient.send(err, {
      request: req,
      response: res,
      next: next
    });
  });

  app.get('/', function(req, res) {
    return res.sendFile(process.cwd() + '/www/index.html');
  });

  app.post('/login', function(req, res) {
    return res.send("user: " + req.body.user + " pass: " + req.body.pass);
  });

  server = http.listen(port, function() {
    var host;
    host = server.address().address;
    port = server.address().port;
    return console.log('server started at http://%s:%s', host, port);
  });


  /*
  post {
    author: "",
    title: "",
    description: "",
    tags: {},
    requirement: {}, //tags and requirement are automatically generated as user input
    status: "",
    comp: "",
    location: "",
    remark: "",
    date: "",
  }
   */

  server.on('error', function(err) {
    return raygunClient.send(err);
  });

  io.on('connection', function(socket) {
    socket.emit('handshake', 'welcome to nerve');
    return socket.on('error', function(err) {
      return raygunClient.send(err);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QVksQ0FBQyxJQUFiLENBQWtCLEdBQWxCLEVBRGlCO0lBQUEsQ0FBbkIsRUFGa0I7RUFBQSxDQUFwQixDQWhFQSxDQUFBO0FBQUEiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImlmIHByb2Nlc3MuZW52Lk5PREVUSU1FX0FDQ09VTlRfS0VZP1xuICByZXF1aXJlKCdub2RldGltZScpLnByb2ZpbGVcbiAgICBhY2NvdW50S2V5OiBwcm9jZXNzLmVudi5OT0RFVElNRV9BQ0NPVU5UX0tFWSxcbiAgICBhcHBOYW1lOiAnbmVydmVkJ1xuXG5yYXlndW4gPSByZXF1aXJlICdyYXlndW4nXG5yYXlndW5DbGllbnQgPSBuZXcgcmF5Z3VuLkNsaWVudCgpLmluaXRcbiAgYXBpS2V5OiAnTUpxZkNtaGZzVnpLOHdSM1RNTC9Gdz09J1xuXG5kID0gcmVxdWlyZSgnZG9tYWluJykuY3JlYXRlKClcbmQub24gJ2Vycm9yJywgKGVycikgLT5cbiAgcmF5Z3VuQ2xpZW50LnNlbmQgZXJyLCB7fSwgLT5cbiAgICBwcm9jZXNzLmV4aXQoKVxuXG5wb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCAzOTM5XG5cbmV4cHJlc3MgPSByZXF1aXJlICdleHByZXNzJ1xuYXBwID0gZXhwcmVzcygpXG5odHRwID0gcmVxdWlyZSgnaHR0cCcpLlNlcnZlcihhcHApXG5pbyA9IHJlcXVpcmUoJ3NvY2tldC5pbycpKGh0dHApXG51dWlkID0gcmVxdWlyZSAnbm9kZS11dWlkJ1xuYm9keVBhcnNlciA9IHJlcXVpcmUgJ2JvZHktcGFyc2VyJ1xuXG5cbmFwcC51c2UgYm9keVBhcnNlci51cmxlbmNvZGVkIGV4dGVuZGVkOiBmYWxzZVxuYXBwLnVzZSAnL2NzcycsIGV4cHJlc3Muc3RhdGljIHByb2Nlc3MuY3dkKCkgKyAnL3d3dy9jc3MnXG5hcHAudXNlICcvaW1nJywgZXhwcmVzcy5zdGF0aWMgcHJvY2Vzcy5jd2QoKSArICcvd3d3L2ltZydcbmFwcC51c2UgJy9qcycsIGV4cHJlc3Muc3RhdGljIHByb2Nlc3MuY3dkKCkgKyAnL3d3dy9qcydcbmFwcC51c2UgKGVyciwgcmVxLCByZXMsIG5leHQpIC0+XG4gIHJheWd1bkNsaWVudC5zZW5kIGVycixcbiAgICByZXF1ZXN0OiByZXFcbiAgICByZXNwb25zZTogcmVzXG4gICAgbmV4dDogbmV4dFxuXG5hcHAuZ2V0ICcvJywgKHJlcSwgcmVzKSAtPlxuICByZXMuc2VuZEZpbGUgcHJvY2Vzcy5jd2QoKSArICcvd3d3L2luZGV4Lmh0bWwnXG5cbiMjbXVzdCB1c2UgeC13d3ctZm9ybS11cmxlbmNvZGVkXG5hcHAucG9zdCAnL2xvZ2luJywgKHJlcSwgcmVzKSAtPlxuICByZXMuc2VuZCBcInVzZXI6IFwiICsgcmVxLmJvZHkudXNlciArIFwiIHBhc3M6IFwiICsgcmVxLmJvZHkucGFzc1xuXG5zZXJ2ZXIgPSBodHRwLmxpc3RlbiBwb3J0LCAtPlxuICBob3N0ID0gc2VydmVyLmFkZHJlc3MoKS5hZGRyZXNzXG4gIHBvcnQgPSBzZXJ2ZXIuYWRkcmVzcygpLnBvcnRcbiAgY29uc29sZS5sb2cgJ3NlcnZlciBzdGFydGVkIGF0IGh0dHA6Ly8lczolcycsIGhvc3QsIHBvcnRcblxuIyMjXG5wb3N0IHtcbiAgYXV0aG9yOiBcIlwiLFxuICB0aXRsZTogXCJcIixcbiAgZGVzY3JpcHRpb246IFwiXCIsXG4gIHRhZ3M6IHt9LFxuICByZXF1aXJlbWVudDoge30sIC8vdGFncyBhbmQgcmVxdWlyZW1lbnQgYXJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGFzIHVzZXIgaW5wdXRcbiAgc3RhdHVzOiBcIlwiLFxuICBjb21wOiBcIlwiLFxuICBsb2NhdGlvbjogXCJcIixcbiAgcmVtYXJrOiBcIlwiLFxuICBkYXRlOiBcIlwiLFxufVxuIyMjXG5cbnNlcnZlci5vbiAnZXJyb3InLCAoZXJyKSAtPlxuICByYXlndW5DbGllbnQuc2VuZCBlcnJcblxuaW8ub24gJ2Nvbm5lY3Rpb24nLCAoc29ja2V0KSAtPlxuICBzb2NrZXQuZW1pdCAnaGFuZHNoYWtlJywgJ3dlbGNvbWUgdG8gbmVydmUnXG4gIHNvY2tldC5vbiAnZXJyb3InLCAoZXJyKSAtPlxuICAgIHJheWd1bkNsaWVudC5zZW5kIGVyclxuIl19