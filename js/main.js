(function() {
  var app, bodyParser, d, express, http, io, mongo, mongourl, port, raygun, raygunClient, server, uuid;

  if (process.env.NODETIME_ACCOUNT_KEY != null) {
    require('nodetime').profile({
      accountKey: process.env.NODETIME_ACCOUNT_KEY,
      appName: 'nerved'
    });
  }

  raygun = require('raygun');

  raygunClient = new raygun.Client().init({
    apiKey: 'MJqfCmhfsVzK8wR3TML/Fw=='
  });

  d = require('domain').create();

  d.on('error', function(err) {
    return raygunClient.send(err, {}, function() {
      return process.exit();
    });
  });

  port = process.env.PORT || 3939;

  express = require('express');

  app = express();

  http = require('http').Server(app);

  io = require('socket.io')(http);

  uuid = require('node-uuid');

  bodyParser = require('body-parser');

  mongo = require('mongodb').MongoClient;

  mongourl = 'mongodb://nerved:CphV7caUpdYRR9@ds041561.mongolab.com:41561/heroku_app33695157';

  mongo.connect(mongourl, function(err, db) {
    if (err != null) {
      raygunClient.send(err);
      process.exit();
    }
    return console.log('connected to database.');
  });

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use('/css', express["static"](process.cwd() + '/www/css'));

  app.use('/img', express["static"](process.cwd() + '/www/img'));

  app.use('/js', express["static"](process.cwd() + '/www/js'));

  app.use(function(err, req, res, next) {
    return raygunClient.send(err, {
      request: req,
      response: res,
      next: next
    });
  });

  app.get('/', function(req, res) {
    return res.sendFile(process.cwd() + '/www/index.html');
  });

  app.post('/login', function(req, res) {
    return res.send("user: " + req.body.user + " pass: " + req.body.pass);
  });

  server = http.listen(port, function() {
    var host;
    host = server.address().address;
    port = server.address().port;
    return console.log('server started at http://%s:%s', host, port);
  });


  /*
  post {
    author: "",
    title: "",
    description: "",
    tags: {},
    requirement: {}, //tags and requirement are automatically generated as user input
    status: "",
    comp: "",
    location: "",
    remark: "",
    date: "",
  }
   */

  server.on('error', function(err) {
    return raygunClient.send(err);
  });

  io.on('connection', function(socket) {
    socket.emit('handshake', 'welcome to nerve');
    return socket.on('error', function(err) {
      return raygunClient.send(err);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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cERULENBQUE7O0FBeURBO0FBQUE7Ozs7Ozs7Ozs7Ozs7S0F6REE7O0FBQUEsRUF3RUEsTUFBTSxDQUFDLEVBQVAsQ0FBVyxPQUFYLEVBQW1CLFNBQUMsR0FBRCxHQUFBO1dBQ2pCLFlBQVksQ0FBQyxJQUFiLENBQWtCLEdBQWxCLEVBRGlCO0VBQUEsQ0FBbkIsQ0F4RUEsQ0FBQTs7QUFBQSxFQTJFQSxFQUFFLENBQUMsRUFBSCxDQUFPLFlBQVAsRUFBb0IsU0FBQyxNQUFELEdBQUE7QUFDbEIsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFhLFdBQWIsRUFBMEIsa0JBQTFCLENBQUEsQ0FBQTtXQUNBLE1BQU0sQ0FBQyxFQUFQLENBQVcsT0FBWCxFQUFtQixTQUFDLEdBQUQsR0FBQTthQUNqQixZQUFZLENBQUMsSUFBYixDQUFrQixHQUFsQixFQURpQjtJQUFBLENBQW5CLEVBRmtCO0VBQUEsQ0FBcEIsQ0EzRUEsQ0FBQTtBQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJpZiBwcm9jZXNzLmVudi5OT0RFVElNRV9BQ0NPVU5UX0tFWT9cbiAgcmVxdWlyZSgnbm9kZXRpbWUnKS5wcm9maWxlXG4gICAgYWNjb3VudEtleTogcHJvY2Vzcy5lbnYuTk9ERVRJTUVfQUNDT1VOVF9LRVksXG4gICAgYXBwTmFtZTogJ25lcnZlZCdcblxucmF5Z3VuID0gcmVxdWlyZSAncmF5Z3VuJ1xucmF5Z3VuQ2xpZW50ID0gbmV3IHJheWd1bi5DbGllbnQoKS5pbml0XG4gIGFwaUtleTogJ01KcWZDbWhmc1Z6Szh3UjNUTUwvRnc9PSdcblxuZCA9IHJlcXVpcmUoJ2RvbWFpbicpLmNyZWF0ZSgpXG5kLm9uICdlcnJvcicsIChlcnIpIC0+XG4gIHJheWd1bkNsaWVudC5zZW5kIGVyciwge30sIC0+XG4gICAgcHJvY2Vzcy5leGl0KClcblxucG9ydCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzkzOVxuXG5leHByZXNzID0gcmVxdWlyZSAnZXhwcmVzcydcbmFwcCA9IGV4cHJlc3MoKVxuaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKS5TZXJ2ZXIoYXBwKVxuaW8gPSByZXF1aXJlKCdzb2NrZXQuaW8nKShodHRwKVxudXVpZCA9IHJlcXVpcmUgJ25vZGUtdXVpZCdcbmJvZHlQYXJzZXIgPSByZXF1aXJlICdib2R5LXBhcnNlcidcbm1vbmdvID0gcmVxdWlyZSgnbW9uZ29kYicpLk1vbmdvQ2xpZW50XG5cbm1vbmdvdXJsID0gJ21vbmdvZGI6Ly9uZXJ2ZWQ6Q3BoVjdjYVVwZFlSUjlAZHMwNDE1NjEubW9uZ29sYWIuY29tOjQxNTYxL2hlcm9rdV9hcHAzMzY5NTE1NydcblxuIyNDb25uZWN0IHRvIG1vbmdvZGIgc2VydmVyXG5tb25nby5jb25uZWN0IG1vbmdvdXJsLCAoZXJyLCBkYikgLT5cbiAgaWYgZXJyP1xuICAgIHJheWd1bkNsaWVudC5zZW5kIGVyclxuICAgIHByb2Nlc3MuZXhpdCgpXG5cbiAgY29uc29sZS5sb2cgJ2Nvbm5lY3RlZCB0byBkYXRhYmFzZS4nXG5cblxuYXBwLnVzZSBib2R5UGFyc2VyLnVybGVuY29kZWQgZXh0ZW5kZWQ6IGZhbHNlXG5hcHAudXNlICcvY3NzJywgZXhwcmVzcy5zdGF0aWMgcHJvY2Vzcy5jd2QoKSArICcvd3d3L2NzcydcbmFwcC51c2UgJy9pbWcnLCBleHByZXNzLnN0YXRpYyBwcm9jZXNzLmN3ZCgpICsgJy93d3cvaW1nJ1xuYXBwLnVzZSAnL2pzJywgZXhwcmVzcy5zdGF0aWMgcHJvY2Vzcy5jd2QoKSArICcvd3d3L2pzJ1xuYXBwLnVzZSAoZXJyLCByZXEsIHJlcywgbmV4dCkgLT5cbiAgcmF5Z3VuQ2xpZW50LnNlbmQgZXJyLFxuICAgIHJlcXVlc3Q6IHJlcVxuICAgIHJlc3BvbnNlOiByZXNcbiAgICBuZXh0OiBuZXh0XG5cbmFwcC5nZXQgJy8nLCAocmVxLCByZXMpIC0+XG4gIHJlcy5zZW5kRmlsZSBwcm9jZXNzLmN3ZCgpICsgJy93d3cvaW5kZXguaHRtbCdcblxuIyNtdXN0IHVzZSB4LXd3dy1mb3JtLXVybGVuY29kZWRcbmFwcC5wb3N0ICcvbG9naW4nLCAocmVxLCByZXMpIC0+XG4gIHJlcy5zZW5kIFwidXNlcjogXCIgKyByZXEuYm9keS51c2VyICsgXCIgcGFzczogXCIgKyByZXEuYm9keS5wYXNzXG5cbnNlcnZlciA9IGh0dHAubGlzdGVuIHBvcnQsIC0+XG4gIGhvc3QgPSBzZXJ2ZXIuYWRkcmVzcygpLmFkZHJlc3NcbiAgcG9ydCA9IHNlcnZlci5hZGRyZXNzKCkucG9ydFxuICBjb25zb2xlLmxvZyAnc2VydmVyIHN0YXJ0ZWQgYXQgaHR0cDovLyVzOiVzJywgaG9zdCwgcG9ydFxuXG4jIyNcbnBvc3Qge1xuICBhdXRob3I6IFwiXCIsXG4gIHRpdGxlOiBcIlwiLFxuICBkZXNjcmlwdGlvbjogXCJcIixcbiAgdGFnczoge30sXG4gIHJlcXVpcmVtZW50OiB7fSwgLy90YWdzIGFuZCByZXF1aXJlbWVudCBhcmUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYXMgdXNlciBpbnB1dFxuICBzdGF0dXM6IFwiXCIsXG4gIGNvbXA6IFwiXCIsXG4gIGxvY2F0aW9uOiBcIlwiLFxuICByZW1hcms6IFwiXCIsXG4gIGRhdGU6IFwiXCIsXG59XG4jIyNcblxuc2VydmVyLm9uICdlcnJvcicsIChlcnIpIC0+XG4gIHJheWd1bkNsaWVudC5zZW5kIGVyclxuXG5pby5vbiAnY29ubmVjdGlvbicsIChzb2NrZXQpIC0+XG4gIHNvY2tldC5lbWl0ICdoYW5kc2hha2UnLCAnd2VsY29tZSB0byBuZXJ2ZSdcbiAgc29ja2V0Lm9uICdlcnJvcicsIChlcnIpIC0+XG4gICAgcmF5Z3VuQ2xpZW50LnNlbmQgZXJyXG4iXX0=