(function() {
  var app, authorizedClients, bodyParser, chalk, connectedClients, d, express, getClient, guest, http, io, mongo, mongourl, port, raygun, raygunClient, server, uuid, validateClient;

  if (process.env.NODETIME_ACCOUNT_KEY != null) {
    require('nodetime').profile({
      accountKey: process.env.NODETIME_ACCOUNT_KEY,
      appName: 'nerved'
    });
  }

  raygun = require('raygun');

  raygunClient = new raygun.Client().init({
    apiKey: 'MJqfCmhfsVzK8wR3TML/Fw=='
  });

  d = require('domain').create();

  d.on('error', function(err) {
    return raygunClient.send(err, {}, function() {
      return process.exit();
    });
  });

  port = process.env.PORT || 3939;

  require('newrelic');

  express = require('express');

  app = express();

  http = require('http').Server(app);

  io = require('socket.io')(http);

  uuid = require('node-uuid');

  bodyParser = require('body-parser');

  mongo = require('mongodb').MongoClient;

  chalk = require('chalk');

  mongourl = 'mongodb://nerved:CphV7caUpdYRR9@ds041561.mongolab.com:41561/heroku_app33695157';

  connectedClients = [];

  authorizedClients = [];

  guest = {
    name: "guest",
    email: "nerve-guest@gmail.com",
    profession: "guest",
    talents: "guesting"
  };

  mongo.connect(mongourl, function(err, db) {
    if (err != null) {
      console.log(chalk.red('filed to connect nerve database'));
      raygunClient.send(err);
      process.exit();
    }
    return console.log(chalk.green('connected to database.'));
  });

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use('/css', express["static"](process.cwd() + '/www/css'));

  app.use('/img', express["static"](process.cwd() + '/www/img'));

  app.use('/js', express["static"](process.cwd() + '/www/js'));

  app.use(function(err, req, res, next) {
    return raygunClient.send(err, {
      request: req,
      response: res,
      next: next
    });
  });

  app.get('/', function(req, res) {
    return res.sendFile(process.cwd() + '/www/index.html');
  });

  app.post('/login', function(req, res) {
    return res.send("user: " + req.body.user + " pass: " + req.body.pass);
  });

  server = http.listen(port, function() {
    var host;
    host = server.address().address;
    port = server.address().port;
    return console.log(chalk.green('server started at http://', host, port));
  });


  /*
  post {
    author: "",
    title: "",
    description: "",
    tags: {},
    requirement: {}, //tags and requirement are automatically generated as user input
    status: "",
    comp: "",
    location: "",
    remark: "",
    date: "",
  }
   */

  getClient = function(type, element) {
    var client, _i, _len;
    for (_i = 0, _len = connectedClients.length; _i < _len; _i++) {
      client = connectedClients[_i];
      if (client[type] === element) {
        return client;
      }
    }
    return null;
  };

  validateClient = function(accessToken, uuid) {
    var client, _i, _len;
    for (_i = 0, _len = authorizedClients.length; _i < _len; _i++) {
      client = authorizedClients[_i];
      if (client['accessToken'] === accessToken) {
        return client['uuid'];
      }
    }
    return null;
  };

  server.on('error', function(err) {
    return raygunClient.send(err);
  });

  io.on('connection', function(socket) {
    var clientUUID;
    clientUUID = uuid.v1();
    connectedClients.push({
      socket: socket,
      uuid: clientUUID,
      profile: guest,
      enabled: false
    });
    socket.emit('handshake', {
      uuid: clientUUID
    });
    console.log(chalk.cyan('client is connected'));
    console.log(chalk.green('currently connected users: ' + connectedClients.length));
    socket.on('disconnect', function() {
      var currentClient, i;
      currentClient = getClient('socket', socket);
      if (currentClient != null) {
        i = connectedClients.indexOf(currentClient);
        if (i !== -1) {
          connectedClients.splice(i, 1);
          console.log(chalk.cyan('user disconnected:'));
          console.log(chalk.green(JSON.stringify(currentClient.profile)));
          return console.log(chalk.green('currently connected users: ' + connectedClients.length));
        }
      }
    });
    socket.on('login', function(data) {
      authorizedClients.push({
        uuid: 'A2wE002-10481E-21048F',
        accessToken: 'A0204E-D30EC-9201E',
        profile: guest
      });
      return console.log(chalk.cyan('client trying to login.'));
    });
    socket.on('post', function(data) {
      clientUUID = validateClient(data.accessToken);
      if (clientUUID != null) {
        return console.log(chalk.green('user ' + clientUUID + ' is allowed for action: post'));
      } else {
        return console.log(chalk.red('client is not authorized for such action'));
      }
    });
    socket.on('ping', function() {
      return console.log(chalk.blue('recieved ping from MotionDex, keep alive.'));
    });
    return socket.on('error', function(err) {
      return raygunClient.send(err);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,