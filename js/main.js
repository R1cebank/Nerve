(function() {
  var app, authorizedClients, bodyParser, chalk, connectedClients, d, express, getClient, guest, http, io, mongo, mongourl, port, raygun, raygunClient, server, uuid, validateClient;

  if (process.env.NODETIME_ACCOUNT_KEY != null) {
    require('nodetime').profile({
      accountKey: process.env.NODETIME_ACCOUNT_KEY,
      appName: 'nerved'
    });
  }

  raygun = require('raygun');

  raygunClient = new raygun.Client().init({
    apiKey: 'MJqfCmhfsVzK8wR3TML/Fw=='
  });

  d = require('domain').create();

  d.on('error', function(err) {
    return raygunClient.send(err, {}, function() {
      return process.exit();
    });
  });

  port = process.env.PORT || 3939;

  express = require('express');

  app = express();

  http = require('http').Server(app);

  io = require('socket.io')(http);

  uuid = require('node-uuid');

  bodyParser = require('body-parser');

  mongo = require('mongodb').MongoClient;

  chalk = require('chalk');

  mongourl = 'mongodb://nerved:CphV7caUpdYRR9@ds041561.mongolab.com:41561/heroku_app33695157';

  connectedClients = [];

  authorizedClients = [];

  guest = {
    name: "guest",
    email: "nerve-guest@gmail.com",
    profession: "guest",
    talents: "guesting"
  };

  mongo.connect(mongourl, function(err, db) {
    if (err != null) {
      console.log(chalk.red('filed to connect nerve database'));
      raygunClient.send(err);
      process.exit();
    }
    return console.log(chalk.green('connected to database.'));
  });

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use('/css', express["static"](process.cwd() + '/www/css'));

  app.use('/img', express["static"](process.cwd() + '/www/img'));

  app.use('/js', express["static"](process.cwd() + '/www/js'));

  app.use(function(err, req, res, next) {
    return raygunClient.send(err, {
      request: req,
      response: res,
      next: next
    });
  });

  app.get('/', function(req, res) {
    return res.sendFile(process.cwd() + '/www/index.html');
  });

  app.post('/login', function(req, res) {
    return res.send("user: " + req.body.user + " pass: " + req.body.pass);
  });

  server = http.listen(port, function() {
    var host;
    host = server.address().address;
    port = server.address().port;
    return console.log(chalk.green('server started at http://', host, port));
  });


  /*
  post {
    author: "",
    title: "",
    description: "",
    tags: {},
    requirement: {}, //tags and requirement are automatically generated as user input
    status: "",
    comp: "",
    location: "",
    remark: "",
    date: "",
  }
   */

  getClient = function(type, element) {
    var client, _i, _len;
    for (_i = 0, _len = connectedClients.length; _i < _len; _i++) {
      client = connectedClients[_i];
      if (client[type] === element) {
        return client;
      }
    }
    return null;
  };

  validateClient = function(accessToken, uuid) {
    var client, _i, _len;
    for (_i = 0, _len = authorizedClients.length; _i < _len; _i++) {
      client = authorizedClients[_i];
      if (client['accessToken'] === accessToken) {
        return client['uuid'];
      }
    }
    return null;
  };

  server.on('error', function(err) {
    return raygunClient.send(err);
  });

  io.on('connection', function(socket) {
    var clientUUID;
    clientUUID = uuid.v1();
    connectedClients.push({
      socket: socket,
      uuid: clientUUID,
      profile: guest,
      enabled: false
    });
    socket.emit('handshake', {
      uuid: clientUUID
    });
    console.log(chalk.cyan('client is connected'));
    console.log(chalk.green('currently connected users: ' + connectedClients.length));
    socket.on('disconnect', function() {
      var currentClient, i;
      currentClient = getClient('socket', socket);
      if (currentClient != null) {
        i = connectedClients.indexOf(currentClient);
        if (i !== -1) {
          connectedClients.splice(i, 1);
          console.log(chalk.cyan('user disconnected:'));
          console.log(chalk.green(JSON.stringify(currentClient.profile)));
          return console.log(chalk.green('currently connected users: ' + connectedClients.length));
        }
      }
    });
    socket.on('login', function(data) {
      authorizedClients.push({
        uuid: 'A2wE002-10481E-21048F',
        accessToken: 'A0204E-D30EC-9201E',
        profile: guest
      });
      return console.log(chalk.cyan('client trying to login.'));
    });
    socket.on('post', function(data) {
      clientUUID = validateClient(data.accessToken);
      if (clientUUID != null) {
        return console.log(chalk.green('user ' + clientUUID + ' is allowed for action: post'));
      } else {
        return console.log(chalk.red('client is not authorized for such action'));
      }
    });
    socket.on('ping', function() {
      return console.log(chalk.blue('recieved ping from MotionDex, keep alive.'));
    });
    return socket.on('error', function(err) {
      return raygunClient.send(err);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LE1BQVgsRUFBa0IsU0FBQSxHQUFBO2FBQ2hCLE9BQU8sQ0FBQyxHQUFSLENBQVksS0FBSyxDQUFDLElBQU4sQ0FBWSwyQ0FBWixDQUFaLEVBRGdCO0lBQUEsQ0FBbEIsQ0E1QkEsQ0FBQTtXQThCQSxNQUFNLENBQUMsRUFBUCxDQUFXLE9BQVgsRUFBbUIsU0FBQyxHQUFELEdBQUE7YUFDakIsWUFBWSxDQUFDLElBQWIsQ0FBa0IsR0FBbEIsRUFEaUI7SUFBQSxDQUFuQixFQS9Ca0I7RUFBQSxDQUFwQixDQW5HQSxDQUFBO0FBQUEiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImlmIHByb2Nlc3MuZW52Lk5PREVUSU1FX0FDQ09VTlRfS0VZP1xuICByZXF1aXJlKCdub2RldGltZScpLnByb2ZpbGVcbiAgICBhY2NvdW50S2V5OiBwcm9jZXNzLmVudi5OT0RFVElNRV9BQ0NPVU5UX0tFWSxcbiAgICBhcHBOYW1lOiAnbmVydmVkJ1xuXG5yYXlndW4gPSByZXF1aXJlICdyYXlndW4nXG5yYXlndW5DbGllbnQgPSBuZXcgcmF5Z3VuLkNsaWVudCgpLmluaXRcbiAgYXBpS2V5OiAnTUpxZkNtaGZzVnpLOHdSM1RNTC9Gdz09J1xuXG5kID0gcmVxdWlyZSgnZG9tYWluJykuY3JlYXRlKClcbmQub24gJ2Vycm9yJywgKGVycikgLT5cbiAgcmF5Z3VuQ2xpZW50LnNlbmQgZXJyLCB7fSwgLT5cbiAgICBwcm9jZXNzLmV4aXQoKVxuXG5wb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCAzOTM5XG5cbmV4cHJlc3MgPSByZXF1aXJlICdleHByZXNzJ1xuYXBwID0gZXhwcmVzcygpXG5odHRwID0gcmVxdWlyZSgnaHR0cCcpLlNlcnZlcihhcHApXG5pbyA9IHJlcXVpcmUoJ3NvY2tldC5pbycpKGh0dHApXG51dWlkID0gcmVxdWlyZSAnbm9kZS11dWlkJ1xuYm9keVBhcnNlciA9IHJlcXVpcmUgJ2JvZHktcGFyc2VyJ1xubW9uZ28gPSByZXF1aXJlKCdtb25nb2RiJykuTW9uZ29DbGllbnRcbmNoYWxrID0gcmVxdWlyZSAnY2hhbGsnXG5cbm1vbmdvdXJsID0gJ21vbmdvZGI6Ly9uZXJ2ZWQ6Q3BoVjdjYVVwZFlSUjlAZHMwNDE1NjEubW9uZ29sYWIuY29tOjQxNTYxL2hlcm9rdV9hcHAzMzY5NTE1NydcblxuY29ubmVjdGVkQ2xpZW50cyA9IFtdXG5hdXRob3JpemVkQ2xpZW50cyA9IFtdXG5cbmd1ZXN0ID1cbiAgbmFtZTogXCJndWVzdFwiXG4gIGVtYWlsOiBcIm5lcnZlLWd1ZXN0QGdtYWlsLmNvbVwiXG4gIHByb2Zlc3Npb246IFwiZ3Vlc3RcIlxuICB0YWxlbnRzOiBcImd1ZXN0aW5nXCJcblxuIyNDb25uZWN0IHRvIG1vbmdvZGIgc2VydmVyXG5tb25nby5jb25uZWN0IG1vbmdvdXJsLCAoZXJyLCBkYikgLT5cbiAgaWYgZXJyP1xuXG4gICAgY29uc29sZS5sb2cgY2hhbGsucmVkICdmaWxlZCB0byBjb25uZWN0IG5lcnZlIGRhdGFiYXNlJ1xuICAgIHJheWd1bkNsaWVudC5zZW5kIGVyclxuICAgIHByb2Nlc3MuZXhpdCgpXG5cbiAgY29uc29sZS5sb2cgY2hhbGsuZ3JlZW4gJ2Nvbm5lY3RlZCB0byBkYXRhYmFzZS4nXG5cblxuYXBwLnVzZSBib2R5UGFyc2VyLnVybGVuY29kZWQgZXh0ZW5kZWQ6IGZhbHNlXG5hcHAudXNlICcvY3NzJywgZXhwcmVzcy5zdGF0aWMgcHJvY2Vzcy5jd2QoKSArICcvd3d3L2NzcydcbmFwcC51c2UgJy9pbWcnLCBleHByZXNzLnN0YXRpYyBwcm9jZXNzLmN3ZCgpICsgJy93d3cvaW1nJ1xuYXBwLnVzZSAnL2pzJywgZXhwcmVzcy5zdGF0aWMgcHJvY2Vzcy5jd2QoKSArICcvd3d3L2pzJ1xuYXBwLnVzZSAoZXJyLCByZXEsIHJlcywgbmV4dCkgLT5cbiAgcmF5Z3VuQ2xpZW50LnNlbmQgZXJyLFxuICAgIHJlcXVlc3Q6IHJlcVxuICAgIHJlc3BvbnNlOiByZXNcbiAgICBuZXh0OiBuZXh0XG5cbmFwcC5nZXQgJy8nLCAocmVxLCByZXMpIC0+XG4gIHJlcy5zZW5kRmlsZSBwcm9jZXNzLmN3ZCgpICsgJy93d3cvaW5kZXguaHRtbCdcblxuIyNtdXN0IHVzZSB4LXd3dy1mb3JtLXVybGVuY29kZWRcbmFwcC5wb3N0ICcvbG9naW4nLCAocmVxLCByZXMpIC0+XG4gIHJlcy5zZW5kIFwidXNlcjogXCIgKyByZXEuYm9keS51c2VyICsgXCIgcGFzczogXCIgKyByZXEuYm9keS5wYXNzXG5cbnNlcnZlciA9IGh0dHAubGlzdGVuIHBvcnQsIC0+XG4gIGhvc3QgPSBzZXJ2ZXIuYWRkcmVzcygpLmFkZHJlc3NcbiAgcG9ydCA9IHNlcnZlci5hZGRyZXNzKCkucG9ydFxuICBjb25zb2xlLmxvZyBjaGFsay5ncmVlbiAnc2VydmVyIHN0YXJ0ZWQgYXQgaHR0cDovLycsIGhvc3QsIHBvcnRcblxuIyMjXG5wb3N0IHtcbiAgYXV0aG9yOiBcIlwiLFxuICB0aXRsZTogXCJcIixcbiAgZGVzY3JpcHRpb246IFwiXCIsXG4gIHRhZ3M6IHt9LFxuICByZXF1aXJlbWVudDoge30sIC8vdGFncyBhbmQgcmVxdWlyZW1lbnQgYXJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGFzIHVzZXIgaW5wdXRcbiAgc3RhdHVzOiBcIlwiLFxuICBjb21wOiBcIlwiLFxuICBsb2NhdGlvbjogXCJcIixcbiAgcmVtYXJrOiBcIlwiLFxuICBkYXRlOiBcIlwiLFxufVxuIyMjXG5cbmdldENsaWVudCA9ICh0eXBlLCBlbGVtZW50KSAtPlxuICBmb3IgY2xpZW50IGluIGNvbm5lY3RlZENsaWVudHNcbiAgICBpZiBjbGllbnRbdHlwZV0gaXMgZWxlbWVudFxuICAgICAgcmV0dXJuIGNsaWVudFxuICByZXR1cm4gbnVsbFxuXG52YWxpZGF0ZUNsaWVudCA9IChhY2Nlc3NUb2tlbiwgdXVpZCkgLT5cbiAgZm9yIGNsaWVudCBpbiBhdXRob3JpemVkQ2xpZW50c1xuICAgIGlmIGNsaWVudFsnYWNjZXNzVG9rZW4nXSBpcyBhY2Nlc3NUb2tlblxuICAgICAgcmV0dXJuIGNsaWVudFsndXVpZCddXG4gIHJldHVybiBudWxsXG5cbnNlcnZlci5vbiAnZXJyb3InLCAoZXJyKSAtPlxuICByYXlndW5DbGllbnQuc2VuZCBlcnJcblxuaW8ub24gJ2Nvbm5lY3Rpb24nLCAoc29ja2V0KSAtPlxuICBjbGllbnRVVUlEID0gdXVpZC52MSgpXG4gIGNvbm5lY3RlZENsaWVudHMucHVzaCBzb2NrZXQ6IHNvY2tldCwgdXVpZDogY2xpZW50VVVJRCwgcHJvZmlsZTogZ3Vlc3QsIGVuYWJsZWQ6IG5vXG4gIHNvY2tldC5lbWl0ICdoYW5kc2hha2UnLFxuICAgIHV1aWQ6IGNsaWVudFVVSURcbiAgY29uc29sZS5sb2cgY2hhbGsuY3lhbiAnY2xpZW50IGlzIGNvbm5lY3RlZCdcbiAgY29uc29sZS5sb2cgY2hhbGsuZ3JlZW4gJ2N1cnJlbnRseSBjb25uZWN0ZWQgdXNlcnM6ICcgKyBjb25uZWN0ZWRDbGllbnRzLmxlbmd0aFxuICBzb2NrZXQub24gJ2Rpc2Nvbm5lY3QnLCAtPlxuICAgIGN1cnJlbnRDbGllbnQgPSBnZXRDbGllbnQgJ3NvY2tldCcsIHNvY2tldFxuICAgIGlmIGN1cnJlbnRDbGllbnQ/XG4gICAgICBpID0gY29ubmVjdGVkQ2xpZW50cy5pbmRleE9mIGN1cnJlbnRDbGllbnRcbiAgICAgIGlmIGkgIT0gLTFcbiAgICAgICAgY29ubmVjdGVkQ2xpZW50cy5zcGxpY2UgaSwgMVxuICAgICAgICBjb25zb2xlLmxvZyBjaGFsay5jeWFuICd1c2VyIGRpc2Nvbm5lY3RlZDonXG4gICAgICAgIGNvbnNvbGUubG9nIGNoYWxrLmdyZWVuIEpTT04uc3RyaW5naWZ5IGN1cnJlbnRDbGllbnQucHJvZmlsZVxuICAgICAgICBjb25zb2xlLmxvZyBjaGFsay5ncmVlbiAnY3VycmVudGx5IGNvbm5lY3RlZCB1c2VyczogJyArIGNvbm5lY3RlZENsaWVudHMubGVuZ3RoXG4gIHNvY2tldC5vbiAnbG9naW4nLCAoZGF0YSkgLT4gIyNkYXRhPXtuYW1lOiAnbmFtZScsIHBhc3N3b3JkOidwYXNzd29yZCd9XG4gICAgIyNNb25nb0RiIGFjdGlvbiBoZXJlXG4gICAgIyNBY2Nlc3MgdG9rZW4gaXMgZ2VuZXJhdGVkIHVzaW5nIHRoZSB1c2VySUQgKyBjdXJyZW50VGltZSArIGRldmljZSBpZGVudGlmaWVyXG4gICAgIyNcbiAgICBhdXRob3JpemVkQ2xpZW50cy5wdXNoIHV1aWQ6ICdBMndFMDAyLTEwNDgxRS0yMTA0OEYnLCBhY2Nlc3NUb2tlbjogJ0EwMjA0RS1EMzBFQy05MjAxRScsIHByb2ZpbGU6IGd1ZXN0XG4gICAgY29uc29sZS5sb2cgY2hhbGsuY3lhbiAnY2xpZW50IHRyeWluZyB0byBsb2dpbi4nXG4gIHNvY2tldC5vbiAncG9zdCcsIChkYXRhKSAtPiAjI3t0aXRsZTogJycsIGRlc2NyaXB0aW9uOiAnJywgZGF0ZTogJycsIHRhZ3M6JycsIHNraWxsczonJyxjb21wOiAnJywgbG9jYXRpb246JycsIGV4cGlyZTonJywgcmVtYXJrczonJywgYWNjZXNzVG9rZW46JycsIHV1aWQ6Jyd9XG4gICAgY2xpZW50VVVJRCA9IHZhbGlkYXRlQ2xpZW50IGRhdGEuYWNjZXNzVG9rZW5cbiAgICBpZiBjbGllbnRVVUlEP1xuICAgICAgIyNQb3N0IHN0dWZmXG4gICAgICBjb25zb2xlLmxvZyBjaGFsay5ncmVlbiAndXNlciAnICsgY2xpZW50VVVJRCArICcgaXMgYWxsb3dlZCBmb3IgYWN0aW9uOiBwb3N0J1xuICAgIGVsc2VcbiAgICAgIGNvbnNvbGUubG9nIGNoYWxrLnJlZCAnY2xpZW50IGlzIG5vdCBhdXRob3JpemVkIGZvciBzdWNoIGFjdGlvbidcbiAgc29ja2V0Lm9uICdwaW5nJywgLT5cbiAgICBjb25zb2xlLmxvZyBjaGFsay5ibHVlICdyZWNpZXZlZCBwaW5nIGZyb20gTW90aW9uRGV4LCBrZWVwIGFsaXZlLidcbiAgc29ja2V0Lm9uICdlcnJvcicsIChlcnIpIC0+XG4gICAgcmF5Z3VuQ2xpZW50LnNlbmQgZXJyXG4iXX0=