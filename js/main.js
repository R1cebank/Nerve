(function() {
  var app, authorizedClients, bodyParser, connectedClients, d, express, getClient, guest, http, io, mongo, mongourl, port, raygun, raygunClient, server, uuid, validateClient;

  if (process.env.NODETIME_ACCOUNT_KEY != null) {
    require('nodetime').profile({
      accountKey: process.env.NODETIME_ACCOUNT_KEY,
      appName: 'nerved'
    });
  }

  raygun = require('raygun');

  raygunClient = new raygun.Client().init({
    apiKey: 'MJqfCmhfsVzK8wR3TML/Fw=='
  });

  d = require('domain').create();

  d.on('error', function(err) {
    return raygunClient.send(err, {}, function() {
      return process.exit();
    });
  });

  port = process.env.PORT || 3939;

  express = require('express');

  app = express();

  http = require('http').Server(app);

  io = require('socket.io')(http);

  uuid = require('node-uuid');

  bodyParser = require('body-parser');

  mongo = require('mongodb').MongoClient;

  mongourl = 'mongodb://nerved:CphV7caUpdYRR9@ds041561.mongolab.com:41561/heroku_app33695157';

  connectedClients = [];

  authorizedClients = [];

  guest = {
    name: "guest",
    email: "nerve-guest@gmail.com",
    profession: "guest",
    talents: "guesting"
  };

  mongo.connect(mongourl, function(err, db) {
    if (err != null) {
      console.log('filed to connect nerve database');
      raygunClient.send(err);
      process.exit();
    }
    return console.log('connected to database.');
  });

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use('/css', express["static"](process.cwd() + '/www/css'));

  app.use('/img', express["static"](process.cwd() + '/www/img'));

  app.use('/js', express["static"](process.cwd() + '/www/js'));

  app.use(function(err, req, res, next) {
    return raygunClient.send(err, {
      request: req,
      response: res,
      next: next
    });
  });

  app.get('/', function(req, res) {
    return res.sendFile(process.cwd() + '/www/index.html');
  });

  app.post('/login', function(req, res) {
    return res.send("user: " + req.body.user + " pass: " + req.body.pass);
  });

  server = http.listen(port, function() {
    var host;
    host = server.address().address;
    port = server.address().port;
    return console.log('server started at http://%s:%s', host, port);
  });


  /*
  post {
    author: "",
    title: "",
    description: "",
    tags: {},
    requirement: {}, //tags and requirement are automatically generated as user input
    status: "",
    comp: "",
    location: "",
    remark: "",
    date: "",
  }
   */

  getClient = function(type, element) {
    var client, _i, _len;
    for (_i = 0, _len = connectedClients.length; _i < _len; _i++) {
      client = connectedClients[_i];
      if (client[type] === element) {
        return client;
      }
    }
    return null;
  };

  validateClient = function(accessToken, uuid) {
    var client, _i, _len;
    for (_i = 0, _len = authorizedClients.length; _i < _len; _i++) {
      client = authorizedClients[_i];
      if (client['accessToken'] === accessToken) {
        return client['uuid'];
      }
    }
    return null;
  };

  server.on('error', function(err) {
    return raygunClient.send(err);
  });

  io.on('connection', function(socket) {
    var clientUUID;
    clientUUID = uuid.v1();
    connectedClients.push({
      socket: socket,
      uuid: clientUUID,
      profile: guest,
      enabled: false
    });
    socket.emit('handshake', {
      uuid: clientUUID
    });
    console.log('client is connected');
    console.log('currently connected users: ' + connectedClients.length);
    socket.on('disconnect', function() {
      var currentClient, i;
      currentClient = getClient('socket', socket);
      if (currentClient != null) {
        i = connectedClients.indexOf(currentClient);
        if (i !== -1) {
          connectedClients.splice(i, 1);
          console.log('user disconnected:');
          console.log(JSON.stringify(currentClient.profile));
          return console.log('currently connected users: ' + connectedClients.length);
        }
      }
    });
    socket.on('login', function(data) {
      authorizedClients.push({
        uuid: 'A2wE002-10481E-21048F',
        accessToken: 'A0204E-D30EC-9201E',
        profile: guest
      });
      return console.log('client trying to login.');
    });
    socket.on('post', function(data) {
      clientUUID = validateClient(data.accessToken);
      if (clientUUID != null) {
        return console.log('user ' + clientUUID + ' is allowed for action: post');
      } else {
        return console.log('client is not authorized for such action');
      }
    });
    return socket.on('error', function(err) {
      return raygunClient.send(err);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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RjtTQUZGO09BRnNCO0lBQUEsQ0FBeEIsQ0FOQSxDQUFBO0FBQUEsSUFlQSxNQUFNLENBQUMsRUFBUCxDQUFXLE9BQVgsRUFBbUIsU0FBQyxJQUFELEdBQUE7QUFJakIsTUFBQSxpQkFBaUIsQ0FBQyxJQUFsQixDQUF1QjtBQUFBLFFBQUEsSUFBQSxFQUFPLHVCQUFQO0FBQUEsUUFBK0IsV0FBQSxFQUFjLG9CQUE3QztBQUFBLFFBQWtFLE9BQUEsRUFBUyxLQUEzRTtPQUF2QixDQUFBLENBQUE7YUFDQSxPQUFPLENBQUMsR0FBUixDQUFhLHlCQUFiLEVBTGlCO0lBQUEsQ0FBbkIsQ0FmQSxDQUFBO0FBQUEsSUFxQkEsTUFBTSxDQUFDLEVBQVAsQ0FBVyxNQUFYLEVBQWtCLFNBQUMsSUFBRCxHQUFBO0FBQ2hCLE1BQUEsVUFBQSxHQUFhLGNBQUEsQ0FBZSxJQUFJLENBQUMsV0FBcEIsQ0FBYixDQUFBO0FBQ0EsTUFBQSxJQUFHLGtCQUFIO2VBRUUsT0FBTyxDQUFDLEdBQVIsQ0FBYSxPQUFBLEdBQVMsVUFBVCxHQUF1Qiw4QkFBcEMsRUFGRjtPQUFBLE1BQUE7ZUFJRSxPQUFPLENBQUMsR0FBUixDQUFhLDBDQUFiLEVBSkY7T0FGZ0I7SUFBQSxDQUFsQixDQXJCQSxDQUFBO1dBNEJBLE1BQU0sQ0FBQyxFQUFQLENBQVcsT0FBWCxFQUFtQixTQUFDLEdBQUQsR0FBQTthQUNqQixZQUFZLENBQUMsSUFBYixDQUFrQixHQUFsQixFQURpQjtJQUFBLENBQW5CLEVBN0JrQjtFQUFBLENBQXBCLENBbEdBLENBQUE7QUFBQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiaWYgcHJvY2Vzcy5lbnYuTk9ERVRJTUVfQUNDT1VOVF9LRVk/XG4gIHJlcXVpcmUoJ25vZGV0aW1lJykucHJvZmlsZVxuICAgIGFjY291bnRLZXk6IHByb2Nlc3MuZW52Lk5PREVUSU1FX0FDQ09VTlRfS0VZLFxuICAgIGFwcE5hbWU6ICduZXJ2ZWQnXG5cbnJheWd1biA9IHJlcXVpcmUgJ3JheWd1bidcbnJheWd1bkNsaWVudCA9IG5ldyByYXlndW4uQ2xpZW50KCkuaW5pdFxuICBhcGlLZXk6ICdNSnFmQ21oZnNWeks4d1IzVE1ML0Z3PT0nXG5cbmQgPSByZXF1aXJlKCdkb21haW4nKS5jcmVhdGUoKVxuZC5vbiAnZXJyb3InLCAoZXJyKSAtPlxuICByYXlndW5DbGllbnQuc2VuZCBlcnIsIHt9LCAtPlxuICAgIHByb2Nlc3MuZXhpdCgpXG5cbnBvcnQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDM5MzlcblxuZXhwcmVzcyA9IHJlcXVpcmUgJ2V4cHJlc3MnXG5hcHAgPSBleHByZXNzKClcbmh0dHAgPSByZXF1aXJlKCdodHRwJykuU2VydmVyKGFwcClcbmlvID0gcmVxdWlyZSgnc29ja2V0LmlvJykoaHR0cClcbnV1aWQgPSByZXF1aXJlICdub2RlLXV1aWQnXG5ib2R5UGFyc2VyID0gcmVxdWlyZSAnYm9keS1wYXJzZXInXG5tb25nbyA9IHJlcXVpcmUoJ21vbmdvZGInKS5Nb25nb0NsaWVudFxuXG5tb25nb3VybCA9ICdtb25nb2RiOi8vbmVydmVkOkNwaFY3Y2FVcGRZUlI5QGRzMDQxNTYxLm1vbmdvbGFiLmNvbTo0MTU2MS9oZXJva3VfYXBwMzM2OTUxNTcnXG5cbmNvbm5lY3RlZENsaWVudHMgPSBbXVxuYXV0aG9yaXplZENsaWVudHMgPSBbXVxuXG5ndWVzdCA9XG4gIG5hbWU6IFwiZ3Vlc3RcIlxuICBlbWFpbDogXCJuZXJ2ZS1ndWVzdEBnbWFpbC5jb21cIlxuICBwcm9mZXNzaW9uOiBcImd1ZXN0XCJcbiAgdGFsZW50czogXCJndWVzdGluZ1wiXG5cbiMjQ29ubmVjdCB0byBtb25nb2RiIHNlcnZlclxubW9uZ28uY29ubmVjdCBtb25nb3VybCwgKGVyciwgZGIpIC0+XG4gIGlmIGVycj9cblxuICAgIGNvbnNvbGUubG9nICdmaWxlZCB0byBjb25uZWN0IG5lcnZlIGRhdGFiYXNlJ1xuICAgIHJheWd1bkNsaWVudC5zZW5kIGVyclxuICAgIHByb2Nlc3MuZXhpdCgpXG5cbiAgY29uc29sZS5sb2cgJ2Nvbm5lY3RlZCB0byBkYXRhYmFzZS4nXG5cblxuYXBwLnVzZSBib2R5UGFyc2VyLnVybGVuY29kZWQgZXh0ZW5kZWQ6IGZhbHNlXG5hcHAudXNlICcvY3NzJywgZXhwcmVzcy5zdGF0aWMgcHJvY2Vzcy5jd2QoKSArICcvd3d3L2NzcydcbmFwcC51c2UgJy9pbWcnLCBleHByZXNzLnN0YXRpYyBwcm9jZXNzLmN3ZCgpICsgJy93d3cvaW1nJ1xuYXBwLnVzZSAnL2pzJywgZXhwcmVzcy5zdGF0aWMgcHJvY2Vzcy5jd2QoKSArICcvd3d3L2pzJ1xuYXBwLnVzZSAoZXJyLCByZXEsIHJlcywgbmV4dCkgLT5cbiAgcmF5Z3VuQ2xpZW50LnNlbmQgZXJyLFxuICAgIHJlcXVlc3Q6IHJlcVxuICAgIHJlc3BvbnNlOiByZXNcbiAgICBuZXh0OiBuZXh0XG5cbmFwcC5nZXQgJy8nLCAocmVxLCByZXMpIC0+XG4gIHJlcy5zZW5kRmlsZSBwcm9jZXNzLmN3ZCgpICsgJy93d3cvaW5kZXguaHRtbCdcblxuIyNtdXN0IHVzZSB4LXd3dy1mb3JtLXVybGVuY29kZWRcbmFwcC5wb3N0ICcvbG9naW4nLCAocmVxLCByZXMpIC0+XG4gIHJlcy5zZW5kIFwidXNlcjogXCIgKyByZXEuYm9keS51c2VyICsgXCIgcGFzczogXCIgKyByZXEuYm9keS5wYXNzXG5cbnNlcnZlciA9IGh0dHAubGlzdGVuIHBvcnQsIC0+XG4gIGhvc3QgPSBzZXJ2ZXIuYWRkcmVzcygpLmFkZHJlc3NcbiAgcG9ydCA9IHNlcnZlci5hZGRyZXNzKCkucG9ydFxuICBjb25zb2xlLmxvZyAnc2VydmVyIHN0YXJ0ZWQgYXQgaHR0cDovLyVzOiVzJywgaG9zdCwgcG9ydFxuXG4jIyNcbnBvc3Qge1xuICBhdXRob3I6IFwiXCIsXG4gIHRpdGxlOiBcIlwiLFxuICBkZXNjcmlwdGlvbjogXCJcIixcbiAgdGFnczoge30sXG4gIHJlcXVpcmVtZW50OiB7fSwgLy90YWdzIGFuZCByZXF1aXJlbWVudCBhcmUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYXMgdXNlciBpbnB1dFxuICBzdGF0dXM6IFwiXCIsXG4gIGNvbXA6IFwiXCIsXG4gIGxvY2F0aW9uOiBcIlwiLFxuICByZW1hcms6IFwiXCIsXG4gIGRhdGU6IFwiXCIsXG59XG4jIyNcblxuZ2V0Q2xpZW50ID0gKHR5cGUsIGVsZW1lbnQpIC0+XG4gIGZvciBjbGllbnQgaW4gY29ubmVjdGVkQ2xpZW50c1xuICAgIGlmIGNsaWVudFt0eXBlXSBpcyBlbGVtZW50XG4gICAgICByZXR1cm4gY2xpZW50XG4gIHJldHVybiBudWxsXG5cbnZhbGlkYXRlQ2xpZW50ID0gKGFjY2Vzc1Rva2VuLCB1dWlkKSAtPlxuICBmb3IgY2xpZW50IGluIGF1dGhvcml6ZWRDbGllbnRzXG4gICAgaWYgY2xpZW50WydhY2Nlc3NUb2tlbiddIGlzIGFjY2Vzc1Rva2VuXG4gICAgICByZXR1cm4gY2xpZW50Wyd1dWlkJ11cbiAgcmV0dXJuIG51bGxcblxuc2VydmVyLm9uICdlcnJvcicsIChlcnIpIC0+XG4gIHJheWd1bkNsaWVudC5zZW5kIGVyclxuXG5pby5vbiAnY29ubmVjdGlvbicsIChzb2NrZXQpIC0+XG4gIGNsaWVudFVVSUQgPSB1dWlkLnYxKClcbiAgY29ubmVjdGVkQ2xpZW50cy5wdXNoIHNvY2tldDogc29ja2V0LCB1dWlkOiBjbGllbnRVVUlELCBwcm9maWxlOiBndWVzdCwgZW5hYmxlZDogbm9cbiAgc29ja2V0LmVtaXQgJ2hhbmRzaGFrZScsXG4gICAgdXVpZDogY2xpZW50VVVJRFxuICBjb25zb2xlLmxvZyAnY2xpZW50IGlzIGNvbm5lY3RlZCdcbiAgY29uc29sZS5sb2cgJ2N1cnJlbnRseSBjb25uZWN0ZWQgdXNlcnM6ICcgKyBjb25uZWN0ZWRDbGllbnRzLmxlbmd0aFxuICBzb2NrZXQub24gJ2Rpc2Nvbm5lY3QnLCAtPlxuICAgIGN1cnJlbnRDbGllbnQgPSBnZXRDbGllbnQgJ3NvY2tldCcsIHNvY2tldFxuICAgIGlmIGN1cnJlbnRDbGllbnQ/XG4gICAgICBpID0gY29ubmVjdGVkQ2xpZW50cy5pbmRleE9mIGN1cnJlbnRDbGllbnRcbiAgICAgIGlmIGkgIT0gLTFcbiAgICAgICAgY29ubmVjdGVkQ2xpZW50cy5zcGxpY2UgaSwgMVxuICAgICAgICBjb25zb2xlLmxvZyAndXNlciBkaXNjb25uZWN0ZWQ6J1xuICAgICAgICBjb25zb2xlLmxvZyBKU09OLnN0cmluZ2lmeSBjdXJyZW50Q2xpZW50LnByb2ZpbGVcbiAgICAgICAgY29uc29sZS5sb2cgJ2N1cnJlbnRseSBjb25uZWN0ZWQgdXNlcnM6ICcgKyBjb25uZWN0ZWRDbGllbnRzLmxlbmd0aFxuICBzb2NrZXQub24gJ2xvZ2luJywgKGRhdGEpIC0+ICMjZGF0YT17bmFtZTogJ25hbWUnLCBwYXNzd29yZDoncGFzc3dvcmQnfVxuICAgICMjTW9uZ29EYiBhY3Rpb24gaGVyZVxuICAgICMjQWNjZXNzIHRva2VuIGlzIGdlbmVyYXRlZCB1c2luZyB0aGUgdXNlcklEICsgY3VycmVudFRpbWUgKyBkZXZpY2UgaWRlbnRpZmllclxuICAgICMjXG4gICAgYXV0aG9yaXplZENsaWVudHMucHVzaCB1dWlkOiAnQTJ3RTAwMi0xMDQ4MUUtMjEwNDhGJywgYWNjZXNzVG9rZW46ICdBMDIwNEUtRDMwRUMtOTIwMUUnLCBwcm9maWxlOiBndWVzdFxuICAgIGNvbnNvbGUubG9nICdjbGllbnQgdHJ5aW5nIHRvIGxvZ2luLidcbiAgc29ja2V0Lm9uICdwb3N0JywgKGRhdGEpIC0+ICMje3RpdGxlOiAnJywgZGVzY3JpcHRpb246ICcnLCBkYXRlOiAnJywgdGFnczonJywgc2tpbGxzOicnLGNvbXA6ICcnLCBsb2NhdGlvbjonJywgZXhwaXJlOicnLCByZW1hcmtzOicnLCBhY2Nlc3NUb2tlbjonJywgdXVpZDonJ31cbiAgICBjbGllbnRVVUlEID0gdmFsaWRhdGVDbGllbnQgZGF0YS5hY2Nlc3NUb2tlblxuICAgIGlmIGNsaWVudFVVSUQ/XG4gICAgICAjI1Bvc3Qgc3R1ZmZcbiAgICAgIGNvbnNvbGUubG9nICd1c2VyICcgKyBjbGllbnRVVUlEICsgJyBpcyBhbGxvd2VkIGZvciBhY3Rpb246IHBvc3QnXG4gICAgZWxzZVxuICAgICAgY29uc29sZS5sb2cgJ2NsaWVudCBpcyBub3QgYXV0aG9yaXplZCBmb3Igc3VjaCBhY3Rpb24nXG4gIHNvY2tldC5vbiAnZXJyb3InLCAoZXJyKSAtPlxuICAgIHJheWd1bkNsaWVudC5zZW5kIGVyclxuIl19