(function() {
  var assert, expect, io, should;

  io = require('socket.io-client');

  expect = require('chai').expect;

  assert = require('chai').assert;

  should = require('chai').should();

  describe.skip("uuid", function() {
    var options;
    options = {
      transports: ['websocket'],
      'force new connection': true
    };
    beforeEach(function(done) {
      var server;
      server = require('../js/nerve.js')(false).server;
      return done();
    });
    return it('should get uuid', function(done) {
      var client;
      client = io.connect('http://localhost:3939', options);
      return client.once('connect', function() {
        client.once('handshake', function(message) {
          expect(message.uuid).to.be.a('string');
          client.disconnect();
          return done();
        });
        return client.emit('ping');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSwwQkFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFBLENBQVMsa0JBQVQsQ0FBTCxDQUFBOztBQUFBLEVBQ0EsTUFBQSxHQUFTLE9BQUEsQ0FBUyxNQUFULENBQWUsQ0FBQyxNQUR6QixDQUFBOztBQUFBLEVBRUEsTUFBQSxHQUFTLE9BQUEsQ0FBUyxNQUFULENBQWUsQ0FBQyxNQUZ6QixDQUFBOztBQUFBLEVBR0EsTUFBQSxHQUFTLE9BQUEsQ0FBUyxNQUFULENBQWUsQ0FBQyxNQUFoQixDQUFBLENBSFQsQ0FBQTs7QUFBQSxFQUtBLFFBQVEsQ0FBQyxJQUFULENBQWUsTUFBZixFQUFzQixTQUFBLEdBQUE7QUFDcEIsUUFBQSxPQUFBO0FBQUEsSUFBQSxPQUFBLEdBQ0U7QUFBQSxNQUFBLFVBQUEsRUFBWSxDQUFFLFdBQUYsQ0FBWjtBQUFBLE1BQ0Msc0JBQUEsRUFBdUIsSUFEeEI7S0FERixDQUFBO0FBQUEsSUFHQSxVQUFBLENBQVcsU0FBQyxJQUFELEdBQUE7QUFDVCxVQUFBLE1BQUE7QUFBQSxNQUFBLE1BQUEsR0FBUyxPQUFBLENBQVMsZ0JBQVQsQ0FBQSxDQUEwQixLQUExQixDQUE2QixDQUFDLE1BQXZDLENBQUE7YUFDQSxJQUFBLENBQUEsRUFGUztJQUFBLENBQVgsQ0FIQSxDQUFBO1dBTUEsRUFBQSxDQUFJLGlCQUFKLEVBQXNCLFNBQUMsSUFBRCxHQUFBO0FBQ3BCLFVBQUEsTUFBQTtBQUFBLE1BQUEsTUFBQSxHQUFTLEVBQUUsQ0FBQyxPQUFILENBQVksdUJBQVosRUFBb0MsT0FBcEMsQ0FBVCxDQUFBO2FBRUEsTUFBTSxDQUFDLElBQVAsQ0FBYSxTQUFiLEVBQXVCLFNBQUEsR0FBQTtBQUNyQixRQUFBLE1BQU0sQ0FBQyxJQUFQLENBQWEsV0FBYixFQUF5QixTQUFDLE9BQUQsR0FBQTtBQUN2QixVQUFBLE1BQUEsQ0FBTyxPQUFPLENBQUMsSUFBZixDQUFvQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBM0IsQ0FBOEIsUUFBOUIsQ0FBQSxDQUFBO0FBQUEsVUFFQSxNQUFNLENBQUMsVUFBUCxDQUFBLENBRkEsQ0FBQTtpQkFHQSxJQUFBLENBQUEsRUFKdUI7UUFBQSxDQUF6QixDQUFBLENBQUE7ZUFLQSxNQUFNLENBQUMsSUFBUCxDQUFhLE1BQWIsRUFOcUI7TUFBQSxDQUF2QixFQUhvQjtJQUFBLENBQXRCLEVBUG9CO0VBQUEsQ0FBdEIsQ0FMQSxDQUFBO0FBQUEiLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImlvID0gcmVxdWlyZSAnc29ja2V0LmlvLWNsaWVudCdcbmV4cGVjdCA9IHJlcXVpcmUoJ2NoYWknKS5leHBlY3RcbmFzc2VydCA9IHJlcXVpcmUoJ2NoYWknKS5hc3NlcnRcbnNob3VsZCA9IHJlcXVpcmUoJ2NoYWknKS5zaG91bGQoKVxuXG5kZXNjcmliZS5za2lwIFwidXVpZFwiLCAoKSAtPlxuICBvcHRpb25zID1cbiAgICB0cmFuc3BvcnRzOiBbJ3dlYnNvY2tldCddXG4gICAgJ2ZvcmNlIG5ldyBjb25uZWN0aW9uJzogdHJ1ZVxuICBiZWZvcmVFYWNoIChkb25lKSAtPlxuICAgIHNlcnZlciA9IHJlcXVpcmUoJy4uL2pzL25lcnZlLmpzJykobm8pLnNlcnZlclxuICAgIGRvbmUoKVxuICBpdCAnc2hvdWxkIGdldCB1dWlkJywgKGRvbmUpIC0+XG4gICAgY2xpZW50ID0gaW8uY29ubmVjdCAnaHR0cDovL2xvY2FsaG9zdDozOTM5Jywgb3B0aW9uc1xuXG4gICAgY2xpZW50Lm9uY2UgJ2Nvbm5lY3QnLCAoKSAtPlxuICAgICAgY2xpZW50Lm9uY2UgJ2hhbmRzaGFrZScsIChtZXNzYWdlKSAtPlxuICAgICAgICBleHBlY3QobWVzc2FnZS51dWlkKS50by5iZS5hICdzdHJpbmcnXG5cbiAgICAgICAgY2xpZW50LmRpc2Nvbm5lY3QoKVxuICAgICAgICBkb25lKClcbiAgICAgIGNsaWVudC5lbWl0ICdwaW5nJ1xuIl19