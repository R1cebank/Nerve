(function() {
  var assert, expect, io, should;

  io = require('socket.io-client');

  expect = require('chai').expect;

  assert = require('chai').assert;

  should = require('chai').should();

  describe("uuid", function() {
    var options;
    options = {
      transports: ['websocket'],
      'force new connection': true
    };
    beforeEach(function(done) {
      var server;
      server = require('../js/nerve.js')(false).server;
      return done();
    });
    return it('should get uuid', function(done) {
      var client;
      client = io.connect('http://localhost:3939', options);
      return client.once('connect', function() {
        client.once('handshake', function(message) {
          expect(message.uuid).to.be.a('string');
          client.disconnect();
          return done();
        });
        return client.emit('ping');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSwwQkFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFBLENBQVMsa0JBQVQsQ0FBTCxDQUFBOztBQUFBLEVBQ0EsTUFBQSxHQUFTLE9BQUEsQ0FBUyxNQUFULENBQWUsQ0FBQyxNQUR6QixDQUFBOztBQUFBLEVBRUEsTUFBQSxHQUFTLE9BQUEsQ0FBUyxNQUFULENBQWUsQ0FBQyxNQUZ6QixDQUFBOztBQUFBLEVBR0EsTUFBQSxHQUFTLE9BQUEsQ0FBUyxNQUFULENBQWUsQ0FBQyxNQUFoQixDQUFBLENBSFQsQ0FBQTs7QUFBQSxFQUtBLFFBQUEsQ0FBVSxNQUFWLEVBQWlCLFNBQUEsR0FBQTtBQUNmLFFBQUEsT0FBQTtBQUFBLElBQUEsT0FBQSxHQUNFO0FBQUEsTUFBQSxVQUFBLEVBQVksQ0FBRSxXQUFGLENBQVo7QUFBQSxNQUNDLHNCQUFBLEVBQXVCLElBRHhCO0tBREYsQ0FBQTtBQUFBLElBR0EsVUFBQSxDQUFXLFNBQUMsSUFBRCxHQUFBO0FBQ1QsVUFBQSxNQUFBO0FBQUEsTUFBQSxNQUFBLEdBQVMsT0FBQSxDQUFTLGdCQUFULENBQUEsQ0FBMEIsS0FBMUIsQ0FBNkIsQ0FBQyxNQUF2QyxDQUFBO2FBQ0EsSUFBQSxDQUFBLEVBRlM7SUFBQSxDQUFYLENBSEEsQ0FBQTtXQU1BLEVBQUEsQ0FBSSxpQkFBSixFQUFzQixTQUFDLElBQUQsR0FBQTtBQUNwQixVQUFBLE1BQUE7QUFBQSxNQUFBLE1BQUEsR0FBUyxFQUFFLENBQUMsT0FBSCxDQUFZLHVCQUFaLEVBQW9DLE9BQXBDLENBQVQsQ0FBQTthQUVBLE1BQU0sQ0FBQyxJQUFQLENBQWEsU0FBYixFQUF1QixTQUFBLEdBQUE7QUFDckIsUUFBQSxNQUFNLENBQUMsSUFBUCxDQUFhLFdBQWIsRUFBeUIsU0FBQyxPQUFELEdBQUE7QUFDdkIsVUFBQSxNQUFBLENBQU8sT0FBTyxDQUFDLElBQWYsQ0FBb0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQTNCLENBQThCLFFBQTlCLENBQUEsQ0FBQTtBQUFBLFVBRUEsTUFBTSxDQUFDLFVBQVAsQ0FBQSxDQUZBLENBQUE7aUJBR0EsSUFBQSxDQUFBLEVBSnVCO1FBQUEsQ0FBekIsQ0FBQSxDQUFBO2VBS0EsTUFBTSxDQUFDLElBQVAsQ0FBYSxNQUFiLEVBTnFCO01BQUEsQ0FBdkIsRUFIb0I7SUFBQSxDQUF0QixFQVBlO0VBQUEsQ0FBakIsQ0FMQSxDQUFBO0FBQUEiLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImlvID0gcmVxdWlyZSAnc29ja2V0LmlvLWNsaWVudCdcbmV4cGVjdCA9IHJlcXVpcmUoJ2NoYWknKS5leHBlY3RcbmFzc2VydCA9IHJlcXVpcmUoJ2NoYWknKS5hc3NlcnRcbnNob3VsZCA9IHJlcXVpcmUoJ2NoYWknKS5zaG91bGQoKVxuXG5kZXNjcmliZSBcInV1aWRcIiwgKCkgLT5cbiAgb3B0aW9ucyA9XG4gICAgdHJhbnNwb3J0czogWyd3ZWJzb2NrZXQnXVxuICAgICdmb3JjZSBuZXcgY29ubmVjdGlvbic6IHRydWVcbiAgYmVmb3JlRWFjaCAoZG9uZSkgLT5cbiAgICBzZXJ2ZXIgPSByZXF1aXJlKCcuLi9qcy9uZXJ2ZS5qcycpKG5vKS5zZXJ2ZXJcbiAgICBkb25lKClcbiAgaXQgJ3Nob3VsZCBnZXQgdXVpZCcsIChkb25lKSAtPlxuICAgIGNsaWVudCA9IGlvLmNvbm5lY3QgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzkzOScsIG9wdGlvbnNcblxuICAgIGNsaWVudC5vbmNlICdjb25uZWN0JywgKCkgLT5cbiAgICAgIGNsaWVudC5vbmNlICdoYW5kc2hha2UnLCAobWVzc2FnZSkgLT5cbiAgICAgICAgZXhwZWN0KG1lc3NhZ2UudXVpZCkudG8uYmUuYSAnc3RyaW5nJ1xuXG4gICAgICAgIGNsaWVudC5kaXNjb25uZWN0KClcbiAgICAgICAgZG9uZSgpXG4gICAgICBjbGllbnQuZW1pdCAncGluZydcbiJdfQ==